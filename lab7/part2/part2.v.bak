module part2();
reg [4:0] state, next_state;
always @(state, reset)
case(state):
4'd0: if(!reset) next_state = 4'd0;
		else if(w==0) next_state = 4'd1;
		else next_state = 4'd5;
4'd1: if(!reset) next_state = 4'd0;
		else if(w==0) next_state = 4'd2;
		else next_state = 4'd5;
4'd2: if(!reset) next_state = 4'd0;
		else if(w==0) next_state = 4'd3;
		else next_state = 4'd5;
4'd3: if(!reset) next_state = 4'd0;
		else if(w==0) next_state = 4'd4;
		else next_state = 4'd5;
4'd4: if(!reset) next_state = 4'd0;
		else if(w==0) next_state = 4'd4;
		else next_state = 4'd5;
4'd5: if(!reset) next_state = 4'd0;
		else if(w==0) next_state = 4'd1;
		else next_state = 4'd6;
4'd6: if(!reset) next_state = 4'd0;
		else if(w==0) next_state = 4'd1;
		else next_state = 4'd7;
4'd7: if(!reset) next_state = 4'd0;
		else if(w==0) next_state = 4'd1;
		else next_state = 4'd8;
4'd8: if(!reset) next_state = 4'd0;
		else if(w==0) next_state = 4'd1;
		else next_state = 4'd8;
endcase
